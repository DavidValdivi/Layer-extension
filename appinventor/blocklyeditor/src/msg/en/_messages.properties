
# Blocks editor definitions
blockseditor.Blockly.Msg.UNDO = Undo
# Description: Context menus.
blockseditor.Blockly.Msg.REDO = Redo
blockseditor.Blockly.Msg.CLEAN_UP = Clean up Blocks
blockseditor.Blockly.Msg.HIDE = Hide Workspace Controls
blockseditor.Blockly.Msg.SHOW = Show Workspace Controls
blockseditor.Blockly.Msg.DUPLICATE_BLOCK = Duplicate
blockseditor.Blockly.Msg.REMOVE_COMMENT = Remove Comment
blockseditor.Blockly.Msg.ADD_COMMENT = Add Comment
blockseditor.Blockly.Msg.EXTERNAL_INPUTS = External Inputs
blockseditor.Blockly.Msg.INLINE_INPUTS = Inline Inputs
blockseditor.Blockly.Msg.HORIZONTAL_PARAMETERS = Arrange Parameters Horizontally
blockseditor.Blockly.Msg.VERTICAL_PARAMETERS = Arrange Parameters Vertically
blockseditor.Blockly.Msg.CONFIRM_DELETE = Confirm deletion
blockseditor.Blockly.Msg.DELETE_ALL_BLOCKS = Delete all %1 blocks?
blockseditor.Blockly.Msg.DELETE_BLOCK = Delete Block
blockseditor.Blockly.Msg.DELETE_X_BLOCKS = Delete %1 Blocks
blockseditor.Blockly.Msg.COLLAPSE_BLOCK = Collapse Block
blockseditor.Blockly.Msg.EXPAND_BLOCK = Expand Block
blockseditor.Blockly.Msg.DISABLE_BLOCK = Disable Block
blockseditor.Blockly.Msg.ENABLE_BLOCK = Enable Block
blockseditor.Blockly.Msg.HELP = Help
blockseditor.Blockly.Msg.EXPORT_IMAGE = Download Blocks as Image
blockseditor.Blockly.Msg.COLLAPSE_ALL = Collapse Blocks
blockseditor.Blockly.Msg.EXPAND_ALL = Expand Blocks
blockseditor.Blockly.Msg.ARRANGE_H = Arrange Blocks Horizontally
blockseditor.Blockly.Msg.ARRANGE_V = Arrange Blocks Vertically
blockseditor.Blockly.Msg.ARRANGE_S = Arrange Blocks Diagonally
blockseditor.Blockly.Msg.SORT_W = Sort Blocks by Width
blockseditor.Blockly.Msg.SORT_H = Sort Blocks by Height
blockseditor.Blockly.Msg.SORT_C = Sort Blocks by Category
blockseditor.Blockly.Msg.COPY_TO_BACKPACK = Add to Backpack
blockseditor.Blockly.Msg.COPY_ALLBLOCKS = Copy All Blocks to Backpack
blockseditor.Blockly.Msg.REMOVE_FROM_BACKPACK = Remove from Backpack
blockseditor.Blockly.Msg.BACKPACK_GET = Paste All Blocks from Backpack
blockseditor.Blockly.Msg.BACKPACK_EMPTY = Empty the Backpack
blockseditor.Blockly.Msg.BACKPACK_CONFIRM_EMPTY = Are you sure you want to empty the backpack?
blockseditor.Blockly.Msg.BACKPACK_DOC_TITLE = Backpack Information
blockseditor.Blockly.Msg.SHOW_BACKPACK_DOCUMENTATION = Show Backpack documentation
blockseditor.Blockly.Msg.BACKPACK_DOCUMENTATION = The Backpack is a copy/paste feature. It allows you to copy blocks from one project or screen  and paste them into another project or screen.  To copy, you can drag-and-drop blocks into the Backpack. To paste, click on the Backpack icon and  drag-and-drop blocks into the workspace.</p><p>If you leave MIT App Inventor with blocks left in your backpack,  they will be there the next time you login.</p><p><a href\=''/reference/other/backpack.html'' target\=''_blank''>Click Here</a> for further documentation and a ''how to'' video.
blockseditor.Blockly.Msg.ENABLE_GRID = Enable Workspace Grid
blockseditor.Blockly.Msg.DISABLE_GRID = Disable Workspace Grid
blockseditor.Blockly.Msg.ENABLE_SNAPPING = Enable Snap to Grid
blockseditor.Blockly.Msg.DISABLE_SNAPPING = Disable Snap to Grid
blockseditor.Blockly.Msg.DISABLE_ALL_BLOCKS = Disable All Blocks
blockseditor.Blockly.Msg.ENABLE_ALL_BLOCKS = Enable All Blocks
blockseditor.Blockly.Msg.HIDE_ALL_COMMENTS = Hide All Comments
blockseditor.Blockly.Msg.SHOW_ALL_COMMENTS = Show All Comments
blockseditor.Blockly.Msg.GENERICIZE_BLOCK = Make Generic
blockseditor.Blockly.Msg.UNGENERICIZE_BLOCK = Make Specific
blockseditor.Blockly.Msg.DOWNLOAD_BLOCKS_AS_PNG = Download Blocks as PNG
blockseditor.Blockly.Msg.CHANGE_VALUE_TITLE = Change value\:
# Description: Variable renaming.
blockseditor.Blockly.Msg.NEW_VARIABLE = New variable...
blockseditor.Blockly.Msg.NEW_VARIABLE_TITLE = New variable name\:
blockseditor.Blockly.Msg.RENAME_VARIABLE = Rename variable...
blockseditor.Blockly.Msg.RENAME_VARIABLE_TITLE = Rename all "%1" variables to\:
blockseditor.Blockly.Msg.VARIABLE_CATEGORY = Variables
# Description: Toolbox.
blockseditor.Blockly.Msg.PROCEDURE_CATEGORY = Procedures
blockseditor.Blockly.Msg.ERROR_BLOCK_CANNOT_BE_IN_DEFINTION = This block cannot be in a definition
# Description: Warnings/Errors
blockseditor.Blockly.Msg.ERROR_SELECT_VALID_ITEM_FROM_DROPDOWN = Select a valid item in the drop down.
blockseditor.Blockly.Msg.ERROR_DUPLICATE_EVENT_HANDLER = This is a duplicate event handler for this component.
blockseditor.Blockly.Msg.ERROR_COMPONENT_DOES_NOT_EXIST = Component does not exist
blockseditor.Blockly.Msg.ERROR_BLOCK_IS_NOT_DEFINED = This block is not defined. Delete this block!
blockseditor.Blockly.Msg.ERROR_BREAK_ONLY_IN_LOOP = The break block should be used only within loops
blockseditor.Blockly.Msg.LANG_COLOUR_PICKER_HELPURL = /reference/blocks/colors.html#basic
# Description: Colour Blocks.
blockseditor.Blockly.Msg.LANG_COLOUR_PICKER_TOOLTIP = Click the square to pick a color.
blockseditor.Blockly.Msg.LANG_COLOUR_BLACK = black
blockseditor.Blockly.Msg.LANG_COLOUR_WHITE = white
blockseditor.Blockly.Msg.LANG_COLOUR_RED = red
blockseditor.Blockly.Msg.LANG_COLOUR_PINK = pink
blockseditor.Blockly.Msg.LANG_COLOUR_ORANGE = orange
blockseditor.Blockly.Msg.LANG_COLOUR_YELLOW = yellow
blockseditor.Blockly.Msg.LANG_COLOUR_GREEN = green
blockseditor.Blockly.Msg.LANG_COLOUR_CYAN = cyan
blockseditor.Blockly.Msg.LANG_COLOUR_BLUE = blue
blockseditor.Blockly.Msg.LANG_COLOUR_MAGENTA = magenta
blockseditor.Blockly.Msg.LANG_COLOUR_LIGHT_GRAY = light gray
blockseditor.Blockly.Msg.LANG_COLOUR_DARK_GRAY = dark gray
blockseditor.Blockly.Msg.LANG_COLOUR_GRAY = gray
blockseditor.Blockly.Msg.LANG_COLOUR_SPLIT_COLOUR = split color
blockseditor.Blockly.Msg.LANG_COLOUR_SPLIT_COLOUR_HELPURL = /reference/blocks/colors.html#split
blockseditor.Blockly.Msg.LANG_COLOUR_SPLIT_COLOUR_TOOLTIP = A list of four elements, each in the range 0 to 255, representing the red, green, blue and alpha components.
blockseditor.Blockly.Msg.LANG_COLOUR_MAKE_COLOUR = make color
blockseditor.Blockly.Msg.LANG_COLOUR_MAKE_COLOUR_HELPURL = /reference/blocks/colors.html#make
blockseditor.Blockly.Msg.LANG_COLOUR_MAKE_COLOUR_TOOLTIP = A color with the given red, green, blue, and optionally alpha components
blockseditor.Blockly.Msg.LANG_CATEGORY_CONTROLS = Control
# Description: Control Blocks
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_HELPURL = /reference/blocks/control.html#if
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_MSG_IF = if
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_MSG_ELSEIF = else if
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_MSG_ELSE = else
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_MSG_THEN = then
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_IF_TITLE_IF = if
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_IF_TOOLTIP = Add, remove, or reorder sections\nto reconfigure this if block.
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_ELSEIF_TITLE_ELSEIF = else if
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_ELSEIF_TOOLTIP = Add a condition to the if block.
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_ELSE_TITLE_ELSE = else
blockseditor.Blockly.Msg.LANG_CONTROLS_IF_ELSE_TOOLTIP = Add a final, catch-all condition to the if block.
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_HELPURL = /reference/blocks/control.html#while
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT = repeat
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_INPUT_DO = do
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE = while
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = until
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = While a value is true, then do some statements.
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = While a value is false, then do some statements.
blockseditor.Blockly.Msg.LANG_CONTROLS_FOR_INPUT_WITH = count with
blockseditor.Blockly.Msg.LANG_CONTROLS_FOR_INPUT_VAR = x
blockseditor.Blockly.Msg.LANG_CONTROLS_FOR_INPUT_FROM = from
blockseditor.Blockly.Msg.LANG_CONTROLS_FOR_INPUT_TO = to
blockseditor.Blockly.Msg.LANG_CONTROLS_FOR_INPUT_DO = do
blockseditor.Blockly.Msg.LANG_CONTROLS_FOR_TOOLTIP = Count from a start number to an end number.\nFor each count, set the current count number to\nvariable "%1", and then do some statements.
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_HELPURL = /reference/blocks/control.html#forrange
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_ITEM = for each
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_VAR = number
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_START = from
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_END = to
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_STEP = by
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_DO = do
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_TEXT = for number in range
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_PREFIX = for 
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_SUFFIX =  in range
blockseditor.Blockly.Msg.LANG_CONTROLS_FORRANGE_TOOLTIP = Runs the blocks in the ''do'' section for each numeric ''value in the range from start to end, stepping the value each time.  Use the given variable name to refer to the current value.lockly.Msg.LANG_CONTROLS_FOREACH_HELPURL \= ''/reference/blocks/control.html#foreach
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_ITEM = for each
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_VAR = item
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_INLIST = in list
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_DO = do
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_TEXT = for item in list
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_PREFIX = for 
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_SUFFIX =  in list
blockseditor.Blockly.Msg.LANG_CONTROLS_FOREACH_TOOLTIP = Runs the blocks in the ''do''  section for each item in ''the list.  Use the given variable name to refer to the current list item.lockly.Msg.LANG_CONTROLS_GET_HELPURL \= ''/reference/blocks/control.html#get
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_HELPURL = http\://en.wikipedia.org/wiki/Control_flow
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP = of loop
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = break out
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = continue with next iteration
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = Break out of the containing loop.
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = Skip the rest of this loop, and\ncontinue with the next iteration.
blockseditor.Blockly.Msg.LANG_CONTROLS_FLOW_STATEMENTS_WARNING = Warning\:\nThis block may only\nbe used within a loop.
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILE_HELPURL = /reference/blocks/control.html#while
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILE_TITLE = while
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILE_INPUT_TEST = test
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILE_INPUT_DO = do
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILE_COLLAPSED_TEXT = while
blockseditor.Blockly.Msg.LANG_CONTROLS_WHILE_TOOLTIP = Runs the blocks in the ''do'' section while the test is ''true.lockly.Msg.LANG_CONTROLS_CHOOSE_HELPURL \= ''/reference/blocks/control.html#choose
blockseditor.Blockly.Msg.LANG_CONTROLS_CHOOSE_TITLE = if''Blockly.Msg.LANG_CONTROLS_CHOOSE_INPUT_TEST \= ''
blockseditor.Blockly.Msg.LANG_CONTROLS_CHOOSE_INPUT_THEN_RETURN = then
blockseditor.Blockly.Msg.LANG_CONTROLS_CHOOSE_INPUT_ELSE_RETURN = else
blockseditor.Blockly.Msg.LANG_CONTROLS_CHOOSE_COLLAPSED_TEXT = if
blockseditor.Blockly.Msg.LANG_CONTROLS_DO_THEN_RETURN_INPUT_DO = do
blockseditor.Blockly.Msg.LANG_CONTROLS_DO_THEN_RETURN_INPUT_RETURN = result
blockseditor.Blockly.Msg.LANG_CONTROLS_DO_THEN_RETURN_TOOLTIP = Runs the blocks in ''do'' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.
blockseditor.Blockly.Msg.LANG_CONTROLS_DO_THEN_RETURN_COLLAPSED_TEXT = do/result
blockseditor.Blockly.Msg.LANG_CONTROLS_DO_THEN_RETURN_TITLE = do result
blockseditor.Blockly.Msg.LANG_CONTROLS_EVAL_BUT_IGNORE_TITLE = evaluate but ignore result''Blockly.Msg.LANG_CONTROLS_EVAL_BUT_IGNORE_HELPURL \= ''/reference/blocks/control.html#evaluate
blockseditor.Blockly.Msg.LANG_CONTROLS_EVAL_BUT_COLLAPSED_TEXT = eval but ignore''Blockly.Msg.LANG_CONTROLS_EVAL_BUT_IGNORE_TOOLTIP \= ''Runs the connected block of code and ignores the return value (if any). Useful if need to call a procedure with a return value but don''t need the value.
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_HELPURL = /reference/blocks/control.html#openscreen
# Description: /* [lyn, 10/14/13] Removed for now. May come back some day.Blockly.Msg.LANG_CONTROLS_NOTHING_TITLE = 'nothing';Blockly.Msg.LANG_CONTROLS_NOTHING_HELPURL = '/reference/blocks/control.html#nothing';Blockly.Msg.LANG_CONTROLS_NOTHING_TOOLTIP = 'Returns nothing. Used to initialize variables or can be plugged into a return socket if no value needed to return. this is equivalent to null or None.';*/
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TITLE = open another screen
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_INPUT_SCREENNAME = screenName
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_COLLAPSED_TEXT = open screen
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TOOLTIP = Opens a new screen in a multiple screen app.
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_HELPURL = /reference/blocks/control.html#openscreenwithvalue
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TITLE = open another screen with start value
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_SCREENNAME = screenName
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_STARTVALUE = startValue
blockseditor.Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_COLLAPSED_TEXT = open screen with value''Blockly.Msg.LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TOOLTIP \= ''Opens a new screen in a multiple screen app and passes the ''start value to that screen.lockly.Msg.LANG_CONTROLS_GET_START_VALUE_HELPURL \= ''/reference/blocks/control.html#getstartvalue
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_START_VALUE_TITLE = get start value
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_START_VALUE_INPUT_SCREENNAME = screenName
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_START_VALUE_INPUT_STARTVALUE = startValue
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_START_VALUE_COLLAPSED_TEXT = get start value
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_START_VALUE_TOOLTIP = Returns the value that was passed to this screen when it ''was opened, typically by another screen in a multiple-screen app. If no value was passed, returns the empty text.lockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_HELPURL \= ''/reference/blocks/control.html#closescreen
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_TITLE = close screen
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_COLLAPSED_TEXT = close screen
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_TOOLTIP = Close the current screen
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_HELPURL = /reference/blocks/control.html#closescreenwithvalue
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TITLE = close screen with value
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_INPUT_RESULT = result
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_COLLAPSED_TEXT = close screen with value
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TOOLTIP = Closes the current screen and returns a result to the ''screen that opened this one.lockly.Msg.LANG_CONTROLS_CLOSE_APPLICATION_HELPURL \= ''/reference/blocks/control.html#closeapp
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_APPLICATION_TITLE = close application
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_APPLICATION_COLLAPSED_TEXT = close application
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_APPLICATION_TOOLTIP = Closes all screens in this app and stops the app.
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_PLAIN_START_TEXT_HELPURL = /reference/blocks/control.html#getplainstarttext
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_PLAIN_START_TEXT_TITLE = get plain start text
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_PLAIN_START_TEXT_COLLAPSED_TEXT = get plain start text
blockseditor.Blockly.Msg.LANG_CONTROLS_GET_PLAIN_START_TEXT_TOOLTIP = Returns the plain text that was passed to this screen when ''it was started by another app. If no value was passed, returns the empty text. For multiple screen apps, use get start value rather than get plain start text.lockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_HELPURL \= ''/reference/blocks/control.html#closescreenwithplaintext
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TITLE = close screen with plain text
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_COLLAPSED_TEXT = close screen with plain text
blockseditor.Blockly.Msg.LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TOOLTIP = Closes the current screen and returns text to the app that ''opened this one.   This command is for returning text to non-App Inventor activities, not to App Inventor screens. For App Inventor Screens, as in multiple screen apps, use Close Screen with Value, not Close Screen with Plain Text.lockly.Msg.LANG_CONTROLS_BREAK_HELPURL \= ''/reference/blocks/control.html#break
blockseditor.Blockly.Msg.LANG_CONTROLS_BREAK_TITLE = break
blockseditor.Blockly.Msg.LANG_CONTROLS_BREAK_INPUT_TEXT = value
blockseditor.Blockly.Msg.LANG_CONTROLS_BREAK_COLLAPSED_TEXT = break
blockseditor.Blockly.Msg.LANG_CATEGORY_LOGIC = Logic
# Description: Logic Blocks.
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_HELPURL = http\://en.wikipedia.org/wiki/Inequality_(mathematics)
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_HELPURL_EQ = /reference/blocks/logic.html#\=
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_HELPURL_NEQ = /reference/blocks/logic.html#not\=
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_TOOLTIP_EQ = Tests whether two things are equal. \nThe things being compared can be any things, not only numbers. \nNumbers are considered to be equal to their printed form as strings, \nfor example, the number 0 is equal to the text "0".  Also, two strings \nthat represent numbers are equal if the numbers are equal, for example \n"1" is equal to "01".
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_TOOLTIP_NEQ = Return true if both inputs are not equal to each other.
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_TRANSLATED_NAME = logic equal
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_EQ = \=
blockseditor.Blockly.Msg.LANG_LOGIC_COMPARE_NEQ = \u2260
blockseditor.Blockly.Msg.LANG_LOGIC_OPERATION_HELPURL_AND = /reference/blocks/logic.html#and
blockseditor.Blockly.Msg.LANG_LOGIC_OPERATION_HELPURL_OR = /reference/blocks/logic.html#or
blockseditor.Blockly.Msg.LANG_LOGIC_OPERATION_AND = and
blockseditor.Blockly.Msg.LANG_LOGIC_OPERATION_OR = or
blockseditor.Blockly.Msg.LANG_LOGIC_OPERATION_TOOLTIP_AND = Return true if all inputs are true.
blockseditor.Blockly.Msg.LANG_LOGIC_OPERATION_TOOLTIP_OR = Return true if any input is true.
blockseditor.Blockly.Msg.LANG_LOGIC_NEGATE_HELPURL = /reference/blocks/logic.html#not
blockseditor.Blockly.Msg.LANG_LOGIC_NEGATE_INPUT_NOT = not
blockseditor.Blockly.Msg.LANG_LOGIC_NEGATE_TOOLTIP = Returns true if the input is false.\nReturns false if the input is true.
blockseditor.Blockly.Msg.LANG_LOGIC_BOOLEAN_TRUE_HELPURL = /reference/blocks/logic.html#true
blockseditor.Blockly.Msg.LANG_LOGIC_BOOLEAN_FALSE_HELPURL = /reference/blocks/logic.html#false
blockseditor.Blockly.Msg.LANG_LOGIC_BOOLEAN_TRUE = true
blockseditor.Blockly.Msg.LANG_LOGIC_BOOLEAN_FALSE = false
blockseditor.Blockly.Msg.LANG_LOGIC_BOOLEAN_TOOLTIP_TRUE = Returns the boolean true.
blockseditor.Blockly.Msg.LANG_LOGIC_BOOLEAN_TOOLTIP_FALSE = Returns the boolean false.
blockseditor.Blockly.Msg.LANG_CATEGORY_MATH = Math
# Description: Math Blocks.
blockseditor.Blockly.Msg.LANG_MATH_NUMBER_HELPURL = /reference/blocks/math.html#number
blockseditor.Blockly.Msg.LANG_MATH_NUMBER_TOOLTIP = Report the number shown.
blockseditor.Blockly.Msg.LANG_MATH_MUTATOR_ITEM_INPUT_NUMBER = number
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL = 
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL_EQ = /reference/blocks/math.html#\=
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL_NEQ = /reference/blocks/math.html#not\=
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL_LT = /reference/blocks/math.html#lt
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL_LTE = /reference/blocks/math.html#lte
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL_GT = /reference/blocks/math.html#gt
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_HELPURL_GTE = /reference/blocks/math.html#gte
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_TOOLTIP_EQ = Return true if both numbers are equal to each other.
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_TOOLTIP_NEQ = Return true if both numbers are not equal to each other.
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_TOOLTIP_LT = Return true if the first number is smaller\nthan the second number.
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_TOOLTIP_LTE = Return true if the first number is smaller\nthan or equal to the second number.
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_TOOLTIP_GT = Return true if the first number is greater\nthan the second number.
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_TOOLTIP_GTE = Return true if the first number is greater\nthan or equal to the second number.
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_EQ = \=
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_NEQ = \u2260
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_LT = <
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_LTE = \u2264
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_GT = >
blockseditor.Blockly.Msg.LANG_MATH_COMPARE_GTE = \u2265
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_HELPURL_ADD = /reference/blocks/math.html#add
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_HELPURL_MINUS = /reference/blocks/math.html#subtract
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_HELPURL_MULTIPLY = /reference/blocks/math.html#multiply
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_HELPURL_DIVIDE = /reference/blocks/math.html#divide
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_HELPURL_POWER = /reference/blocks/math.html#exponent
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_HELPURL_AND = /reference/blocks/math.html#bitwise_and
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_HELPURL_IOR = /reference/blocks/math.html#bitwise_ior
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_HELPURL_XOR = /reference/blocks/math.html#bitwise_xor
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_TOOLTIP_ADD = Return the sum of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_TOOLTIP_MINUS = Return the difference of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_TOOLTIP_MULTIPLY = Return the product of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_TOOLTIP_DIVIDE = Return the quotient of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_TOOLTIP_POWER = Return the first number raised to\nthe power of the second number.
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_TOOLTIP_AND = Return the bitwise AND of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_TOOLTIP_IOR = Return the bitwise inclusive OR of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_TOOLTIP_XOR = Return the bitwise exclusive OR of the two numbers.
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_ADD = +
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_MINUS = -
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_MULTIPLY = *
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_DIVIDE = /
blockseditor.Blockly.Msg.LANG_MATH_ARITHMETIC_POWER = ^
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_AND = bitwise and
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_IOR = bitwise or
blockseditor.Blockly.Msg.LANG_MATH_BITWISE_XOR = bitwise xor
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_OP_ROOT = square root
# Description: /*Blockly.Msg.LANG_MATH_CHANGE_TITLE_CHANGE = 'change';Blockly.Msg.LANG_MATH_CHANGE_TITLE_ITEM = 'item';Blockly.Msg.LANG_MATH_CHANGE_INPUT_BY = 'by';Blockly.Msg.LANG_MATH_CHANGE_TOOLTIP = 'Add a number to variable "%1".';*/
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_OP_ABSOLUTE = absolute
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_OP_NEG = neg
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_OP_LN = log
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_OP_EXP = e^
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_TOOLTIP_ROOT = Return the square root of a number.
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_HELPURL_ROOT = /reference/blocks/math.html#sqrt
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_TOOLTIP_ABS = Return the absolute value of a number.
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_HELPURL_ABS = /reference/blocks/math.html#abs
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_TOOLTIP_NEG = Return the negation of a number.
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_HELPURL_NEG = /reference/blocks/math.html#neg
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_TOOLTIP_LN = Return the natural logarithm of a number, i.e. the logarithm to the base e (2.71828...)
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_HELPURL_LN = /reference/blocks/math.html#log
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_TOOLTIP_EXP = Return e (2.71828...) to the power of a number.
blockseditor.Blockly.Msg.LANG_MATH_SINGLE_HELPURL_EXP = /reference/blocks/math.html#e
blockseditor.Blockly.Msg.LANG_TEXT_CHANGECASE_OPERATOR_UPPERCASE = upcase
# Description: /*Blockly.Msg.LANG_TEXT_CHARAT_HELPURL = 'http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm';Blockly.Msg.LANG_TEXT_CHARAT_INPUT_AT = 'letter at';Blockly.Msg.LANG_TEXT_CHARAT_INPUT_INTEXT = 'in text';Blockly.Msg.LANG_TEXT_CHARAT_TOOLTIP = 'Returns the letter at the specified position.';*/
blockseditor.Blockly.Msg.LANG_TEXT_CHANGECASE_OPERATOR_DOWNCASE = downcase
blockseditor.Blockly.Msg.LANG_TEXT_CHANGECASE_TOOLTIP_UPPERCASE = Returns a copy of its text string argument converted to uppercase.
blockseditor.Blockly.Msg.LANG_TEXT_CHANGECASE_HELPURL_UPPERCASE = /reference/blocks/text.html#upcase
blockseditor.Blockly.Msg.LANG_TEXT_CHANGECASE_TOOLTIP_DOWNCASE = Returns a copy of its text string argument converted to lowercase.
blockseditor.Blockly.Msg.LANG_TEXT_CHANGECASE_HELPURL_DOWNCASE = /reference/blocks/text.html#downcase
blockseditor.Blockly.Msg.LANG_TEXT_TRIM_HELPURL = /reference/blocks/text.html#trim
blockseditor.Blockly.Msg.LANG_TEXT_TRIM_TITLE_TRIM = trim
blockseditor.Blockly.Msg.LANG_TEXT_TRIM_TOOLTIP = Returns a copy of its text string arguments with any\n''leading or trailing spaces removed.lockly.Msg.LANG_TEXT_STARTS_AT_HELPURL \= ''/reference/blocks/text.html#startsat
blockseditor.Blockly.Msg.LANG_TEXT_STARTS_AT_INPUT_STARTS_AT = starts at
blockseditor.Blockly.Msg.LANG_TEXT_STARTS_AT_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_TEXT_STARTS_AT_INPUT_PIECE = piece
blockseditor.Blockly.Msg.LANG_TEXT_STARTS_AT_INPUT = starts at  text %1 piece %2
blockseditor.Blockly.Msg.LANG_TEXT_STARTS_AT_TOOLTIP = Returns the starting index of the piece in the text.\n''where index 1 denotes the beginning of the text. Returns 0 if the\npiece is not in the text.lockly.Msg.LANG_TEXT_CONTAINS_HELPURL \= ''/reference/blocks/text.html#contains
blockseditor.Blockly.Msg.LANG_TEXT_CONTAINS_INPUT_CONTAINS = contains
blockseditor.Blockly.Msg.LANG_TEXT_CONTAINS_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_TEXT_CONTAINS_INPUT_PIECE = piece
blockseditor.Blockly.Msg.LANG_TEXT_CONTAINS_INPUT = contains  text %1 piece %2
blockseditor.Blockly.Msg.LANG_TEXT_CONTAINS_TOOLTIP = Tests whether the piece is contained in the text.
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_HELPURL = 
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_INPUT_AT = at
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_INPUT_AT_LIST = at (list)
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST = split at first
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST_OF_ANY = split at first of any
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_OPERATOR_SPLIT = split
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_ANY = split at any
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST = Divides the given text into two pieces using the location of the first occurrence of \n''the text ''at'' as the dividing point, and returns a two-item list consisting of the piece \nbefore the dividing point and the piece after the dividing point. \nSplitting "apple,banana,cherry,dogfood" with a comma as the splitting point \nreturns a list of two items\: the first is the text "apple" and the second is the text \n"banana,cherry,dogfood". \nNotice that the comma after "apple" does not appear in the result, \nbecause that is the dividing point.lockly.Msg.LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST \= ''/reference/blocks/text.html#splitat
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST_OF_ANY = Divides the given text into a two-item list, using the first location of any item \n''in the list ''at'' as the dividing point. \n\nSplitting "I love apples bananas apples grapes" by the list "(ba,ap)" returns \na list of two items, the first being "I love" and the second being \n"ples bananas apples grapes."lockly.Msg.LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST_OF_ANY \= ''/reference/blocks/text.html#splitatfirstofany
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_TOOLTIP_SPLIT = Divides text into pieces using the text ''at'' as the dividing points and produces a list of the results.  \n''Splitting "one,two,three,four" at "," (comma) returns the list "(one two three four)". \nSplitting "one-potato,two-potato,three-potato,four" at "-potato", returns the list "(one two three four)".lockly.Msg.LANG_TEXT_SPLIT_HELPURL_SPLIT \= ''/reference/blocks/text.html#split
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_ANY = Divides the given text into a list, using any of the items in the list ''at'' as the \n''dividing point, and returns a list of the results. \nSplitting "appleberry,banana,cherry,dogfood" with ''at'' as the two-element list whose \nfirst item is a comma and whose second item is "rry" returns a list of four items\: \n"(applebe banana che dogfood)".lockly.Msg.LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_ANY \= ''/reference/blocks/text.html#splitatany
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_AT_SPACES_HELPURL = /reference/blocks/text.html#splitspaces
# Description: /*Blockly.Msg.LANG_TEXT_PROMPT_HELPURL = 'http://www.liv.ac.uk/HPC/HTMLF90Course/HTMLF90CourseNotesnode92.html';Blockly.Msg.LANG_TEXT_PROMPT_TITLE_PROMPT_FOR = 'prompt for';Blockly.Msg.LANG_TEXT_PROMPT_TITILE_WITH_MESSAGE = 'with message';Blockly.Msg.LANG_TEXT_PROMPT_TOOLTIP = 'Prompt for user input with the specified text.';Blockly.Msg.LANG_TEXT_PROMPT_TYPE_TEXT = 'text';Blockly.Msg.LANG_TEXT_PROMPT_TYPE_NUMBER = 'number';*/
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_AT_SPACES_TITLE = split at spaces
blockseditor.Blockly.Msg.LANG_TEXT_SPLIT_AT_TOOLTIP = Split the text into pieces separated by spaces.
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_HELPURL = /reference/blocks/text.html#segment
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_TITLE_SEGMENT = segment
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_INPUT_START = start
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_INPUT_LENGTH = length
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_INPUT = segment  text %1 start %2 length %3
blockseditor.Blockly.Msg.LANG_TEXT_SEGMENT_AT_TOOLTIP = Extracts the segment of the given length from the given text\n''starting from the given text starting from the given position. Position\n1 denotes the beginning of the text.lockly.Msg.LANG_TEXT_REPLACE_ALL_HELPURL \= ''/reference/blocks/text.html#replaceall
blockseditor.Blockly.Msg.LANG_TEXT_REPLACE_ALL_INPUT_SEGMENT = segment
blockseditor.Blockly.Msg.LANG_TEXT_REPLACE_ALL_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_TEXT_REPLACE_ALL_TITLE_REPLACE_ALL = replace all
blockseditor.Blockly.Msg.LANG_TEXT_REPLACE_ALL_INPUT_REPLACEMENT = replacement
blockseditor.Blockly.Msg.LANG_TEXT_REPLACE_ALL_INPUT = replace all text %1 segment %2 replacement %3
blockseditor.Blockly.Msg.LANG_TEXT_REPLACE_ALL_TOOLTIP = Returns a new text obtained by replacing all occurrences\n''of the segment with the replacement.lockly.Msg.LANG_TEXT_TEXT_IS_STRING_HELPURL \= ''/reference/blocks/text.html#isstring
blockseditor.Blockly.Msg.LANG_TEXT_TEXT_IS_STRING_TITLE = is a string?
blockseditor.Blockly.Msg.LANG_TEXT_TEXT_IS_STRING_INPUT_THING = thing
blockseditor.Blockly.Msg.LANG_TEXT_TEXT_IS_STRING_TOOLTIP = Returns true if <code>thing</code> is a string.
blockseditor.Blockly.Msg.LANG_CATEGORY_LISTS = Lists
# Description: Lists Blocks.
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_EMPTY_TITLE = create empty list
# Description: lockly.Msg.LANG_LISTS_CREATE_EMPTY_HELPURL = 'http://en.wikipedia.org/wiki/Linked_list.html#Empty_lists';
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_EMPTY_HELPURL = /reference/blocks/lists.html#makealist
# Description: lockly.Msg.LANG_LISTS_CREATE_EMPTY_TOOLTIP = 'Returns a list, of length 0, containing no data records';
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_TITLE_MAKE_LIST = make a list
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_TOOLTIP = Create a list with any number of items.
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = list
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_CONTAINER_TOOLTIP = Add, remove, or reorder sections to reconfigure this list block.
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_ITEM_TITLE = item
blockseditor.Blockly.Msg.LANG_LISTS_CREATE_WITH_ITEM_TOOLTIP = Add an item to the list.
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEM_TITLE = item
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEM_TOOLTIP = Add an item to the list.
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEM_HELPURL = /reference/blocks/lists.html#additems
blockseditor.Blockly.Msg.LANG_LISTS_SELECT_ITEM_TITLE_HELPURL = /reference/blocks/lists.html#selectlistitem
blockseditor.Blockly.Msg.LANG_LISTS_SELECT_ITEM_TITLE_SELECT = select list item
blockseditor.Blockly.Msg.LANG_LISTS_SELECT_ITEM_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_SELECT_ITEM_INPUT_INDEX = index
blockseditor.Blockly.Msg.LANG_LISTS_SELECT_ITEM_INPUT = select list item  list %1 index %2
blockseditor.Blockly.Msg.LANG_LISTS_SELECT_ITEM_TOOLTIP = Returns the item at position index in the list.
blockseditor.Blockly.Msg.LANG_LISTS_IS_IN_HELPURL = /reference/blocks/lists.html#inlist
blockseditor.Blockly.Msg.LANG_LISTS_IS_IN_TITLE_IS_IN = is in list?
blockseditor.Blockly.Msg.LANG_LISTS_IS_IN_INPUT_THING = thing
blockseditor.Blockly.Msg.LANG_LISTS_IS_IN_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_IS_IN_INPUT = is in list? thing %1 list %2''Blockly.Msg.LANG_LISTS_IS_IN_TOOLTIP \= ''Returns true if the the thing is an item in the list, and ''false if not.lockly.Msg.LANG_LISTS_POSITION_IN_HELPURL \= ''/reference/blocks/lists.html#indexinlist
blockseditor.Blockly.Msg.LANG_LISTS_POSITION_IN_TITLE_POSITION = index in list
blockseditor.Blockly.Msg.LANG_LISTS_POSITION_IN_INPUT_THING = thing
blockseditor.Blockly.Msg.LANG_LISTS_POSITION_IN_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_POSITION_IN_INPUT = index in list  thing %1 list %2
blockseditor.Blockly.Msg.LANG_LISTS_POSITION_IN_TOOLTIP = Find the position of the thing in the list. If it''s not in ''the list, return 0.lockly.Msg.LANG_LISTS_PICK_RANDOM_ITEM_HELPURL \= ''/reference/blocks/lists.html#pickrandomitem
blockseditor.Blockly.Msg.LANG_LISTS_PICK_RANDOM_TITLE_PICK_RANDOM = pick a random item
blockseditor.Blockly.Msg.LANG_LISTS_PICK_RANDOM_ITEM_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_PICK_RANDOM_TOOLTIP = Pick an item at random from the list.
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_HELPURL = /reference/blocks/lists.html#replace
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_TITLE_REPLACE = replace list item
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_INPUT_INDEX = index
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_INPUT_REPLACEMENT = replacement
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_INPUT = replace list item  list %1 index %2 replacement %3
blockseditor.Blockly.Msg.LANG_LISTS_REPLACE_ITEM_TOOLTIP = Replaces the nth item in a list.
blockseditor.Blockly.Msg.LANG_LISTS_REMOVE_ITEM_HELPURL = /reference/blocks/lists.html#removeitem
blockseditor.Blockly.Msg.LANG_LISTS_REMOVE_ITEM_TITLE_REMOVE = remove list item
blockseditor.Blockly.Msg.LANG_LISTS_REMOVE_ITEM_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_REMOVE_ITEM_INPUT_INDEX = index
blockseditor.Blockly.Msg.LANG_LISTS_REMOVE_ITEM_INPUT = remove list item  list %1 index %2
blockseditor.Blockly.Msg.LANG_LISTS_REMOVE_ITEM_TOOLTIP = Removes the item at the specified position from the list.
blockseditor.Blockly.Msg.LANG_LISTS_LENGTH_HELPURL = /reference/blocks/lists.html#lengthoflist
# Description: /*Blockly.Msg.LANG_LISTS_REPEAT_HELPURL = 'http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm';Blockly.Msg.LANG_LISTS_REPEAT_TITLE_CREATE = 'create list with item';Blockly.Msg.LANG_LISTS_REPEAT_INPUT_REPEATED = 'repeated';Blockly.Msg.LANG_LISTS_REPEAT_INPUT_TIMES = 'times';Blockly.Msg.LANG_LISTS_REPEAT_TOOLTIP = 'Creates a list consisting of the given value\n' +'repeated the specified number of times.';*/
blockseditor.Blockly.Msg.LANG_LISTS_LENGTH_INPUT_LENGTH = length of list
blockseditor.Blockly.Msg.LANG_LISTS_LENGTH_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_LENGTH_INPUT = length of list list %1
blockseditor.Blockly.Msg.LANG_LISTS_LENGTH_TOOLTIP = Counts the number of items in a list.
blockseditor.Blockly.Msg.LANG_LISTS_APPEND_LIST_HELPURL = /reference/blocks/lists.html#append
blockseditor.Blockly.Msg.LANG_LISTS_APPEND_LIST_TITLE_APPEND = append to list
blockseditor.Blockly.Msg.LANG_LISTS_APPEND_LIST_INPUT = append to list  list1 %1 list2 %2
blockseditor.Blockly.Msg.LANG_LISTS_APPEND_LIST_TOOLTIP = Appends all the items in list2 onto the end of list1. After ''the append, list1 will include these additional elements, but list2 will be unchanged.lockly.Msg.LANG_LISTS_ADD_ITEMS_HELPURL \= ''/reference/blocks/lists.html#additems
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_TITLE_ADD = add items to list
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_INPUT_LIST =  list
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_INPUT_ITEM = item
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_INPUT = add items to list list %1 item %2
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_TOOLTIP = Adds items to the end of a list.
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_CONTAINER_TITLE_ADD = list
blockseditor.Blockly.Msg.LANG_LISTS_ADD_ITEMS_CONTAINER_TOOLTIP = Add, remove, or reorder sections to reconfigure this list block.
blockseditor.Blockly.Msg.LANG_LISTS_COPY_HELPURL = /reference/blocks/lists.html#copy
blockseditor.Blockly.Msg.LANG_LISTS_COPY_TITLE_COPY = copy list
blockseditor.Blockly.Msg.LANG_LISTS_COPY_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_COPY_TOOLTIP = Makes a copy of a list, including copying all sublists
blockseditor.Blockly.Msg.LANG_LISTS_IS_LIST_HELPURL = /reference/blocks/lists.html#isalist
blockseditor.Blockly.Msg.LANG_LISTS_IS_LIST_TITLE_IS_LIST = is a list?
blockseditor.Blockly.Msg.LANG_LISTS_IS_LIST_INPUT_THING = thing
blockseditor.Blockly.Msg.LANG_LISTS_IS_LIST_TOOLTIP = Tests if something is a list.
blockseditor.Blockly.Msg.LANG_LISTS_REVERSE_HELPURL = /reference/blocks/lists.html#reverse
blockseditor.Blockly.Msg.LANG_LISTS_REVERSE_TITLE_REVERSE = reverse list
blockseditor.Blockly.Msg.LANG_LISTS_REVERSE_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_REVERSE_TOOLTIP = Reverses the order of input list and returns it as a new list.
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_ROW_HELPURL = /reference/blocks/lists.html#listtocsvrow
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_ROW_TITLE_TO_CSV = list to csv row
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_ROW_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_ROW_TOOLTIP = Interprets the list as a row of a table and returns a CSV ''\(comma-separated value\) text representing the row. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. Items are separated by commas. The returned row text does not have a line separator at the end.lockly.Msg.LANG_LISTS_FROM_CSV_ROW_HELPURL \= ''/reference/blocks/lists.html#listfromcsvrow
blockseditor.Blockly.Msg.LANG_LISTS_FROM_CSV_ROW_TITLE_FROM_CSV = list from csv row
blockseditor.Blockly.Msg.LANG_LISTS_FROM_CSV_ROW_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_LISTS_FROM_CSV_ROW_TOOLTIP = Parses a text as a CSV \(comma-separated value\) formatted ''row to produce a list of fields. It is an error for the row text to contain unescaped newlines inside fields \(effectively, multiple lines\). It is okay for the row text to end in a single newline or CRLF.lockly.Msg.LANG_LISTS_TO_CSV_TABLE_HELPURL \= ''/reference/blocks/lists.html#listtocsvtable
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_TABLE_TITLE_TO_CSV = list to csv table
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_TABLE_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_TO_CSV_TABLE_TOOLTIP = Interprets the list as a table in row-major format and ''returns a CSV \(comma-separated value\) text representing the table. Each item in the list should itself be a list representing a row of the CSV table. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. In the returned text, items in rows are separated by commas and rows are separated by CRLF \(\r\n\).lockly.Msg.LANG_LISTS_FROM_CSV_TABLE_HELPURL \= ''/reference/blocks/lists.html#listfromcsvtable
blockseditor.Blockly.Msg.LANG_LISTS_FROM_CSV_TABLE_TITLE_FROM_CSV = list from csv table
blockseditor.Blockly.Msg.LANG_LISTS_FROM_CSV_TABLE_INPUT_TEXT = text
blockseditor.Blockly.Msg.LANG_LISTS_FROM_CSV_TABLE_TOOLTIP = Parses a text as a CSV \(comma-separated value\) formatted ''table to produce a list of rows, each of which is a list of fields. Rows can be separated by newlines \(\n\) or CRLF \(\r\n\).lockly.Msg.LANG_LISTS_INSERT_ITEM_HELPURL \= ''/reference/blocks/lists.html#insert
blockseditor.Blockly.Msg.LANG_LISTS_INSERT_TITLE_INSERT_LIST = insert list item
blockseditor.Blockly.Msg.LANG_LISTS_INSERT_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_INSERT_INPUT_INDEX = index
blockseditor.Blockly.Msg.LANG_LISTS_INSERT_INPUT_ITEM = item
blockseditor.Blockly.Msg.LANG_LISTS_INSERT_INPUT = insert list item  list %1 index %2 item %3
blockseditor.Blockly.Msg.LANG_LISTS_INSERT_TOOLTIP = Insert an item into a list at the specified position.
blockseditor.Blockly.Msg.LANG_LISTS_IS_EMPTY_HELPURL = /reference/blocks/lists.html#islistempty
blockseditor.Blockly.Msg.LANG_LISTS_TITLE_IS_EMPTY = is list empty?
blockseditor.Blockly.Msg.LANG_LISTS_INPUT_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_IS_EMPTY_TOOLTIP = Returns true if the list is empty.
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_HELPURL = /reference/blocks/lists.html#lookuppairs
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_TITLE_LOOKUP_IN_PAIRS = look up in pairs
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_KEY = key
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_PAIRS = pairs
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_NOT_FOUND = notFound
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_INPUT = look up in pairs  key %1 pairs %2 notFound %3
blockseditor.Blockly.Msg.LANG_LISTS_LOOKUP_IN_PAIRS_TOOLTIP = Returns the value associated with the key in the list of pairs
blockseditor.Blockly.Msg.LANG_LISTS_JOIN_WITH_SEPARATOR_HELPURL = /reference/blocks/lists.html#joinwithseparator
# Description: Join With Separator block
blockseditor.Blockly.Msg.LANG_LISTS_JOIN_WITH_SEPARATOR_TITLE = join with separator
blockseditor.Blockly.Msg.LANG_LISTS_JOIN_WITH_SEPARATOR_SEPARATOR = separator
blockseditor.Blockly.Msg.LANG_LISTS_JOIN_WITH_SEPARATOR_LIST = list
blockseditor.Blockly.Msg.LANG_LISTS_JOIN_WITH_SEPARATOR_INPUT = join items using separator %1 list %2
blockseditor.Blockly.Msg.LANG_LISTS_JOIN_WITH_SEPARATOR_TOOLTIP = Returns text with list elements joined with separator
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_DECLARATION_HELPURL = /reference/blocks/variables.html#global
# Description: Variables Blocks.
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_DECLARATION_TITLE_INIT = initialize global
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_DECLARATION_NAME = name
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_DECLARATION_TO = to
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_DECLARATION_COLLAPSED_TEXT = global
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_DECLARATION_TOOLTIP = Creates a global variable and gives it the value of the attached blocks.
blockseditor.Blockly.Msg.LANG_VARIABLES_GLOBAL_PREFIX = global
blockseditor.Blockly.Msg.LANG_VARIABLES_GET_HELPURL = /reference/blocks/variables.html#get
blockseditor.Blockly.Msg.LANG_VARIABLES_GET_TITLE_GET = get
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_IN_RETURN = in
# Description: /* Blockly.Msg.LANG_VARIABLES_GET_INPUT_ITEM = 'item'; */ // [lyn, 10/14/13] unusedBlockly.Msg.LANG_VARIABLES_GET_COLLAPSED_TEXT = 'get';Blockly.Msg.LANG_VARIABLES_GET_TOOLTIP = 'Returns the value of this variable.';Blockly.Msg.LANG_VARIABLES_SET_HELPURL = '/reference/blocks/variables.html#set';Blockly.Msg.LANG_VARIABLES_SET_TITLE_SET = 'set';/* Blockly.Msg.LANG_VARIABLES_SET_INPUT_ITEM = 'item'; */ // [lyn, 10/14/13] unusedBlockly.Msg.LANG_VARIABLES_SET_TITLE_TO = 'to';Blockly.Msg.LANG_VARIABLES_SET_COLLAPSED_TEXT = 'set';Blockly.Msg.LANG_VARIABLES_SET_TOOLTIP = 'Sets this variable to be equal to the input.';Blockly.Msg.LANG_VARIABLES_VARIABLE = ' variable';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_HELPURL = '/reference/blocks/variables.html#do';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_TITLE_INIT = 'initialize local';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_DEFAULT_NAME = 'name';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_INPUT_TO = 'to';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_IN_DO = 'in';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_COLLAPSED_TEXT = 'local';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_TOOLTIP = 'Allows you to create variables that are only accessible in the do part of this block.';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_TRANSLATED_NAME = 'initialize local in do';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_HELPURL = '/reference/blocks/variables.html#return';/* // These don't differ between the statement and expressionBlockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TITLE_INIT = 'initialize local';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_INPUT_NAME = 'name';Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_INPUT_TO = 'to';*/
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_COLLAPSED_TEXT = local
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TOOLTIP = Allows you to create variables that are only accessible in the return part of this block.
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TRANSLATED_NAME = initialize local in return
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TITLE_LOCAL_NAMES = local names
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TOOLTIP = 
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_MUTATOR_ARG_TITLE_NAME = name
blockseditor.Blockly.Msg.LANG_VARIABLES_LOCAL_MUTATOR_ARG_DEFAULT_VARIABLE = x
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFNORETURN_HELPURL = /reference/blocks/procedures.html#do
# Description: Procedures Blocks.
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFNORETURN_DEFINE = to
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFNORETURN_PROCEDURE = procedure
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFNORETURN_DO = do
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFNORETURN_COLLAPSED_PREFIX = to 
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFNORETURN_TOOLTIP = A procedure that does not return a value.
blockseditor.Blockly.Msg.LANG_PROCEDURES_DOTHENRETURN_HELPURL = /reference/blocks/procedures.html#doreturn
blockseditor.Blockly.Msg.LANG_PROCEDURES_DOTHENRETURN_THEN_RETURN = result
blockseditor.Blockly.Msg.LANG_PROCEDURES_DOTHENRETURN_DO = do
blockseditor.Blockly.Msg.LANG_PROCEDURES_DOTHENRETURN_RETURN = result
blockseditor.Blockly.Msg.LANG_PROCEDURES_DOTHENRETURN_TOOLTIP = Runs the blocks in ''do'' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.
blockseditor.Blockly.Msg.LANG_PROCEDURES_DOTHENRETURN_COLLAPSED_TEXT = do/result
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFRETURN_HELPURL = /reference/blocks/procedures.html#return
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFRETURN_DEFINE = to
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFRETURN_RETURN = result
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFRETURN_COLLAPSED_PREFIX = to 
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEFRETURN_TOOLTIP = A procedure returning a result value.
blockseditor.Blockly.Msg.LANG_PROCEDURES_DEF_DUPLICATE_WARNING = Warning\:\nThis procedure has\nduplicate inputs.
blockseditor.Blockly.Msg.LANG_PROCEDURES_GET_HELPURL = /reference/blocks/procedures.html#get
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLNORETURN_HELPURL = /reference/blocks/procedures.html#do
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLNORETURN_CALL = call 
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLNORETURN_PROCEDURE = procedure
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLNORETURN_COLLAPSED_PREFIX = call 
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLNORETURN_TOOLTIP = Call a procedure with no return value.
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLNORETURN_TRANSLATED_NAME = call no return
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLRETURN_HELPURL = /reference/blocks/procedures.html#return
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLRETURN_COLLAPSED_PREFIX = call 
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLRETURN_TOOLTIP = Call a procedure with a return value.
blockseditor.Blockly.Msg.LANG_PROCEDURES_CALLRETURN_TRANSLATED_NAME = call return
blockseditor.Blockly.Msg.LANG_PROCEDURES_MUTATORCONTAINER_TITLE = inputs
blockseditor.Blockly.Msg.LANG_PROCEDURES_MUTATORARG_TITLE = input\:
blockseditor.Blockly.Msg.LANG_PROCEDURES_HIGHLIGHT_DEF = Highlight Procedure
blockseditor.Blockly.Msg.LANG_PROCEDURES_MUTATORCONTAINER_TOOLTIP = 
blockseditor.Blockly.Msg.LANG_PROCEDURES_MUTATORARG_TOOLTIP = 
blockseditor.Blockly.Msg.UNDEFINED_BLOCK_TOOLTIP = This block is not defined. Delete this block!
# Description: Components Blocks.
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_TITLE_WHEN = when 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_TITLE_DO = do
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_EVENT_TITLE = when any 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_METHOD_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_METHOD_TITLE_CALL = call 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_METHOD_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_CALL = call 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_FOR_COMPONENT = for component
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GETTER_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_GETTER_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_GETTER_TITLE_OF_COMPONENT = of component
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_SETTER_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_SETTER_TITLE_SET = set 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_SETTER_TITLE_TO =  to
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_SETTER_HELPURL = 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_SET = set 
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_TO =  to
blockseditor.Blockly.Msg.LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_OF_COMPONENT = of component
