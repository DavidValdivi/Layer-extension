package com.DavidValdivia.LayersMultiple;

import android.content.Context;
import android.graphics.Bitmap;



import android.graphics.Paint;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.os.Build;
import android.view.View;
import android.view.ViewTreeObserver;
import android.app.Activity;

import com.google.appinventor.components.annotations.DesignerComponent;
import com.google.appinventor.components.annotations.PropertyCategory;
import com.google.appinventor.components.annotations.SimpleEvent;
import com.google.appinventor.components.annotations.SimpleFunction;
import com.google.appinventor.components.annotations.SimpleObject;
import com.google.appinventor.components.annotations.SimpleProperty;
import com.google.appinventor.components.annotations.UsesLibraries;
import com.google.appinventor.components.annotations.UsesPermissions;
import com.google.appinventor.components.common.ComponentCategory;
import com.google.appinventor.components.runtime.AndroidNonvisibleComponent;
import com.google.appinventor.components.runtime.ComponentContainer;
import com.google.appinventor.components.runtime.EventDispatcher;
import com.google.appinventor.components.runtime.Canvas;


@DesignerComponent(
        version = 1,
        description = "A component to create movable layouts with text and images.",
        category = ComponentCategory.EXTENSION,
        nonVisible = true,
        iconName = "aiwebres/icon.png "
)
@SimpleObject(external = true)
@UsesLibraries(libraries = "")
@UsesPermissions(permissionNames = "")
public class LayersMultiple extends AndroidNonvisibleComponent {

    private Context context;
    private Activity activity;

    private LayeredView layeredView;
    private Bitmap[] layers; // Array para almacenar las capas
    private Paint paint;
    private int activeLayerIndex; // Índice de la capa activa
    private int widthCanvas = 1920;
    private int heightCanvas = 1080;
    private Canvas canvasComponent;

    public LayersMultiple(ComponentContainer container) {
        super(container.$form());
        this.activity = container.$context();
        this.context = container.$context();

        layers = new Bitmap[15]; // Por ejemplo, 15 capas
        paint = new Paint();      

       // paint.setTypeface(Typeface.DEFAULT);
      //  paint.setTypeface(Typeface.DEFAULT_BOLD);
          paint.setTypeface(Typeface.SANS_SERIF);
       // paint.setTypeface(Typeface.SERIF);
        // paint.setTypeface(Typeface.MONOSPACE);

      
       
        

        for (int i = 0; i < layers.length; i++) {
            layers[i] = Bitmap.createBitmap(widthCanvas, heightCanvas, Bitmap.Config.ARGB_8888); // Ajusta el tamaño
        }

        activeLayerIndex = 0; // Por defecto, la primera capa es activa
        layeredView = new LayeredView(container.$context()); // Crear la vista de capas
    }

   

    @SimpleProperty(category = PropertyCategory.BEHAVIOR, description = "Sets the Canvas component used for drawing.")
    public void SetCanvas(Canvas canvas) {
        this.canvasComponent = canvas;
        SetCanvasMonitoring(canvas);
    }

    public View getView() {
        return layeredView; // Devuelve la vista para ser utilizada en el contenedor
    }

    // Clase interna para la vista de múltiples capas
    private class LayeredView extends View {
        public LayeredView(Context context) {
            super(context);
        }

        @Override
        protected void onDraw(android.graphics.Canvas canvas) {
            for (Bitmap layer : layers) {
                canvas.drawBitmap(layer, 0, 0, null); // Dibuja cada capa
            }
        }
    }

    // Métodos públicos para la funcionalidad del componente
    @SimpleFunction(description = "Set Active Layer Index")
    public void setActiveLayer(int index) {
        if (index >= 0 && index < layers.length) {
            activeLayerIndex = index;
        }
    }

    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void drawCircle(float x, float y, int radio, int colorRelleno, int lineWidth) {
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
        Paint paint = new Paint();       
        paint.setColor(colorRelleno);
        paint.setStrokeWidth(lineWidth);
        layerCanvas.drawCircle(x, y, radio, paint); // Dibuja un círculo en la capa
        RedrawCanvas(); // Redibuja la vista
    }


    @SimpleFunction(description = " ")
    public void DrawPoint(int x, int y, int colorPoin, float widthPoint) {
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
        Paint paint = new Paint();
        paint.setColor(colorPoin);
        paint.setStrokeWidth(widthPoint);
       
     layerCanvas.drawPoint(x, y, paint);
      RedrawCanvas();
    }

    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void drawLine(float startX, float startY, float endX, float endY, int colorLinea, float lineWidth) {
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
        Paint paint = new Paint();
        paint.setColor(colorLinea);
        paint.setStrokeWidth(lineWidth);
        layerCanvas.drawLine(startX, startY, endX, endY, paint); // Dibuja una línea en la capa
        RedrawCanvas(); // Redibuja la vista
    }

    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void drawText(String text, float x, float y, int colortext, int textsize) {
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);  
        Paint paint = new Paint();
        paint.setColor(colortext);        
        paint.setTextSize(textsize);   
        paint.setTypeface(Typeface.SANS_SERIF);   
        layerCanvas.drawText(text, x, y, paint); // Dibuja texto en la capa
        RedrawCanvas(); // Redibuja la vista
    }
    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void MoveText(String text, float x, float y, float newX, float newY, int color, int sizetext) {
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
        Paint paint = new Paint();
        paint.setColor(color);        
        paint.setTextSize(sizetext);   
        paint.setTypeface(Typeface.SANS_SERIF);     
        x = + newX;
        y = + newY;
        layerCanvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR); 
        layerCanvas.drawText(text, x, y, paint); // Dibuja texto en la capa
        RedrawCanvas(); // Redibuja la vista
    }

    @SimpleFunction(description = "Draw a rectangle with a transparent background on the active layer.")
public void drawTransparentRectangle(float left, float top, float right, float bottom) {
    android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
    Paint paint = new Paint();
    paint.setColor(Color.argb(128, 255, 0, 0)); // Color rojo con transparencia (128 es el valor de transparencia)
    paint.setStyle(Paint.Style.FILL); // Establece el estilo de pintura a relleno
    layerCanvas.drawRect(left, top, right, bottom, paint); // Dibuja el rectángulo
    RedrawCanvas(); // Redibuja la vista
}

@SimpleFunction(description = "Draw a circle with a transparent background on the active layer.")
public void drawTransparentCircle(float cx, float cy, float radius) {
    android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
    Paint paint = new Paint();
    paint.setColor(Color.argb(128, 255, 0, 0)); // Color rojo con transparencia (128 es el valor de transparencia)
    paint.setStyle(Paint.Style.FILL); // Establece el estilo de pintura a relleno
    layerCanvas.drawCircle(cx, cy, radius, paint); // Dibuja el círculo
    RedrawCanvas(); // Redibuja la vista
}

@SimpleFunction(description = "Draw a point as an eraser on the active layer.")
public void drawEraserPoint(float x, float y, int pointWidth) {
    android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
    Paint paint = new Paint();
    paint.setColor(Color.TRANSPARENT); // Color transparente
    paint.setStyle(Paint.Style.FILL); // Establece el estilo de pintura a relleno
    paint.setStrokeWidth(pointWidth); // Establece el grosor del punto
    layerCanvas.drawPoint(x, y, paint); // Dibuja el punto
    RedrawCanvas(); // Redibuja la vista
}
@SimpleFunction(description = "Resize the active layer to match the size of the canvas.")
public void resizeLayerToCanvas() {
    if (canvasComponent != null) {
        int canvasWidth = canvasComponent.Width();
        int canvasHeight = canvasComponent.Height();

        Bitmap resizedLayer = Bitmap.createBitmap(canvasWidth, canvasHeight, Bitmap.Config.ARGB_8888);
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(resizedLayer);

        // Copia el contenido de la capa existente al nuevo Bitmap redimensionado
        layerCanvas.drawBitmap(layers[activeLayerIndex], 0, 0, null);

        // Reemplaza la capa existente con la nueva capa redimensionada
        layers[activeLayerIndex] = resizedLayer;

        RedrawCanvas(); // Redibuja la vista
    } else {
        ReportError("Canvas component is null.");
    }
}
@SimpleFunction(description = "Merge all layers into a single layer.")
public void mergeLayers() {
    if (canvasComponent != null) {
        int canvasWidth = canvasComponent.Width();
        int canvasHeight = canvasComponent.Height();

        Bitmap mergedBitmap = Bitmap.createBitmap(canvasWidth, canvasHeight, Bitmap.Config.ARGB_8888);
        android.graphics.Canvas mergedCanvas = new  android.graphics.Canvas(mergedBitmap);

        // Dibuja todas las capas en el nuevo Bitmap fusionado
        for (Bitmap layer : layers) {
            if (layer != null && !layer.isRecycled()) {
                mergedCanvas.drawBitmap(layer, 0, 0, null);
            }
        }

        // Reemplaza la capa activa con el Bitmap fusionado
        layers[activeLayerIndex] = mergedBitmap;

        RedrawCanvas(); // Redibuja la vista
    } else {
        ReportError("Canvas component is null.");
    }
}






   


    @SimpleProperty(description = "get Active Layer Index")
    public int getActiveLayerIndex() {
        return activeLayerIndex;
    }

    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void createLayer(int layerIndex, int canvasWidth, int canvasHeight) {
        if (layerIndex >= 0 && layerIndex < layers.length) {
            if (layers[layerIndex] != null) {
                if (!layers[layerIndex].isRecycled()) {
                    layers[layerIndex].recycle(); // Recicla el bitmap existente si no está reciclado
                }
            }
            layers[layerIndex] = Bitmap.createBitmap(canvasWidth, canvasHeight, Bitmap.Config.ARGB_8888); // Ajusta el tamaño
            clearLayer(layerIndex); // Limpiar la nueva capa
        } else {
            // Manejar el caso en que el índice no es válido
            ReportError("Invalid layer index: " + layerIndex);
        }
    }

    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void clearLayer(int layerIndex) {
        if (layerIndex >= 0 && layerIndex < layers.length && layers[layerIndex] != null) {
            android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[layerIndex]);
            layerCanvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR); // Limpia la capa
            RedrawCanvas(); // Redibuja la vista
        } else {
            // Manejar el caso en que el índice no es válido o el bitmap es nulo
            ReportError("Invalid layer index or null bitmap: " + layerIndex);
        }
    }

    @SimpleFunction(description = "Sample Function Generated by Niotron")
    public void setActiveLayerBackgroundColor(int color) {
        android.graphics.Canvas layerCanvas = new android.graphics.Canvas(layers[activeLayerIndex]);
        layerCanvas.drawColor(color); // Establece el color de fondo
        RedrawCanvas(); // Redibuja la vista
    }

    private void RedrawCanvas() {
        if (canvasComponent != null) {
            Bitmap finalBitmap = Bitmap.createBitmap(widthCanvas, heightCanvas, Bitmap.Config.ARGB_8888);
            android.graphics.Canvas finalCanvas = new android.graphics.Canvas(finalBitmap);

            // Dibuja todas las capas
            for (Bitmap layer : layers) {
                finalCanvas.drawBitmap(layer, 0, 0, null);
            }

            // Actualiza el Canvas del componente
            canvasComponent.getView().setBackground(new BitmapDrawable(context.getResources(), finalBitmap));
            canvasComponent.getView().invalidate();
        }
    }

     public void SetCanvasMonitoring(final Canvas canvas) {
        final View view = canvas.getView();

        // Posterga a verificação até que a View esteja completamente carregada
        view.post(new Runnable() {
            @Override
            public void run() {
                view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
                    @Override
                    public void onGlobalLayout() {
                        // Remove o listener para evitar chamadas múltiplas
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                            view.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                        } else {
                            view.getViewTreeObserver().removeGlobalOnLayoutListener(this);
                        }

                        int newWidth = view.getWidth();
                        int newHeight = view.getHeight();

                        // Dispara o evento com a nova largura e altura
                        CanvasSizeChanged(newWidth, newHeight);
                    }
                });
            }
        });
    }
        

    @SimpleEvent(description = "Report an error with a custom message")
    public void ReportError(String errorMessage) {
        EventDispatcher.dispatchEvent(this, "ReportError", errorMessage);
    }
    @SimpleEvent(description = "Triggered when the Canvas size changes.")
    public void CanvasSizeChanged(int width, int height) {
        EventDispatcher.dispatchEvent(this, "CanvasSizeChanged", width, height);
    }
}



